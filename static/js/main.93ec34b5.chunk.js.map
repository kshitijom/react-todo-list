{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","placeholder","onChange","completed","onClick","Component","NewTodoForm","isDone","handleSubmit","createTodo","uuid","htmlFor","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","todo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93ec34b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisEditing: false, task: this.props.task\n\t\t}\n\t\tthis.handleRemove = this.handleRemove.bind(this);\n\t\tthis.toggleForm = this.toggleForm.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleUpdate = this.handleUpdate.bind(this);\n\t\tthis.handleToggle = this.handleToggle.bind(this);\n\t}\n\thandleRemove () {\n\t\tthis.props.removeTodo(this.props.id);\n\t}\n\ttoggleForm () {\n\t\tthis.setState({ isEditing: !this.state.isEditing });\n\t}\n\thandleUpdate (evt) {\n\t\tevt.preventDefault();\n\t\tthis.props.updateTodo(this.props.id, this.state.task);\n\t\tthis.setState({isEditing: false}); \n\t}\n\thandleChange (evt) {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t}\n\thandleToggle (evt) {\n\t\tthis.props.toggleTodo(this.props.id);\n\t}\n\trender() {\n\t\tlet result;\n\t\tif (this.state.isEditing) {\n\t\t\tresult = (\n\t\t\t\t<div className='Todo'>\n\t\t\t\t\t<form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tname='task'\n\t\t\t\t\t\t\tplaceholder='Edit Todo'\n\t\t\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button>Save</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\tresult = (\n\t\t\t\t<div className='Todo'>\n\t\t\t\t\t<li className={this.props.completed ? 'Todo-task completed' : 'Todo-task'}  onClick={this.handleToggle}>\n\t\t\t\t\t\t{this.props.task}\n\t\t\t\t\t</li>\n\t\t\t\t\t<div className='Todo-buttons'>\n\t\t\t\t\t\t<button onClick={this.toggleForm}>\n\t\t\t\t\t\t\t<i className='fas fa-pen'/>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={this.handleRemove}>\n\t\t\t\t\t\t\t<i className='fas fa-trash'/>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\tresult\n\t\t);\n\t}\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport './NewTodoForm.css'\n\nclass NewTodoForm extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\ttask: '', isDone: false\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\thandleChange (evt) {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t}\n\thandleSubmit (evt) {\n\t\tevt.preventDefault();\n\t\tthis.props.createTodo({...this.state, id: uuid(), completed: false});\n\t\tthis.setState({\n\t\t\ttask: '', isDone: false\n\t\t});\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<form className='NewTodoForm' onSubmit={this.handleSubmit}>\n\t\t\t\t<label htmlFor='task'>New Todo</label>\n\t\t\t\t<input \n\t\t\t\t\tid='task'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='task'\n\t\t\t\t\tplaceholder='New Todo'\n\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<button>Add Todo</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: []\n\t\t};\n\t\tthis.create = this.create.bind(this);\t\n\t\tthis.remove = this.remove.bind(this);\t\n\t\tthis.update = this.update.bind(this);\t\n\t\tthis.toggleCompletion = this.toggleCompletion.bind(this);\t\n\t}\n\tcreate (newTodo) {\n\t\tthis.setState({\n\t\t\ttodos: [...this.state.todos, newTodo]\n\t\t});\n\t}\n\tremove (id) {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter(todo => todo.id !== id)\n\t\t});\n\t}\n\tupdate (id, updatedTask) {\n\t\tconst updatedTodos = this.state.todos.map(todo => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, task:updatedTask };\n\t\t\t} \n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({todos: updatedTodos});\n\t}\n\ttoggleCompletion (id) {\n\t\tconst updatedTodos = this.state.todos.map(todo => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, completed: !todo.completed };\n\t\t\t} \n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({todos: updatedTodos});\n\t}\n\trender () {\n\t\tconst todos = this.state.todos.map(todo => \n\t\t\t<Todo \n\t\t\t\ttask={todo.task} \n\t\t\t\tkey={todo.id} \n\t\t\t\tid={todo.id} \n\t\t\t\tcompleted={todo.completed} \n\t\t\t\tremoveTodo={this.remove} \n\t\t\t\tupdateTodo={this.update}\t\n\t\t\t\ttoggleTodo={this.toggleCompletion}\n\t\t\t/>)\n\t\treturn (\n      <div className='TodoList'>\n\t\t\t\t<h1>\n\t\t\t\t\tTodo List! <span>A Simple React Todo List App.</span>\n\t\t\t\t</h1>\n\t\t\t\t<ul>{todos}</ul>\n\t\t\t\t<NewTodoForm createTodo={this.create}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  render () {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}